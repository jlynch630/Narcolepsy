/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknarcolepsy_graphql"] = self["webpackChunknarcolepsy_graphql"] || []).push([["src_monaco-graphql_src_graphqlMode_ts"],{

/***/ "./src/monaco-graphql/src/graphqlMode.ts":
/*!***********************************************!*\
  !*** ./src/monaco-graphql/src/graphqlMode.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupMode: () => (/* binding */ setupMode)\n/* harmony export */ });\n/* harmony import */ var _workerManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./workerManager */ \"./src/monaco-graphql/src/workerManager.ts\");\n/* harmony import */ var _languageFeatures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageFeatures */ \"./src/monaco-graphql/src/languageFeatures.ts\");\n/**\n *  Copyright (c) 2021 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nfunction setupMode(defaults) {\n    const disposables = [];\n    const providers = [];\n    const client = new _workerManager__WEBPACK_IMPORTED_MODULE_0__.WorkerManager(defaults);\n    disposables.push(client);\n    const worker = (...uris) => {\n        try {\n            return client.getLanguageServiceWorker(...uris);\n        }\n        catch {\n            throw new Error(\"Error fetching graphql language service worker\");\n        }\n    };\n    function registerSchemaLessProviders() {\n        const { modeConfiguration, languageId } = defaults;\n        if (modeConfiguration.documentFormattingEdits) {\n            providers.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new _languageFeatures__WEBPACK_IMPORTED_MODULE_1__.DocumentFormattingAdapter(worker)));\n        }\n    }\n    function registerAllProviders(api) {\n        const { modeConfiguration, languageId } = defaults;\n        disposeAll(providers);\n        if (modeConfiguration.completionItems) {\n            providers.push(monaco.languages.registerCompletionItemProvider(languageId, new _languageFeatures__WEBPACK_IMPORTED_MODULE_1__.CompletionAdapter(worker)));\n        }\n        if (modeConfiguration.diagnostics) {\n            providers.push(new _languageFeatures__WEBPACK_IMPORTED_MODULE_1__.DiagnosticsAdapter(api, worker));\n        }\n        if (modeConfiguration.hovers) {\n            providers.push(monaco.languages.registerHoverProvider(languageId, new _languageFeatures__WEBPACK_IMPORTED_MODULE_1__.HoverAdapter(worker)));\n        }\n        registerSchemaLessProviders();\n    }\n    let { modeConfiguration, formattingOptions, diagnosticSettings, externalFragmentDefinitions, schemas, } = defaults;\n    registerAllProviders(defaults);\n    defaults.onDidChange((newDefaults) => {\n        if (newDefaults.modeConfiguration !== modeConfiguration) {\n            modeConfiguration = newDefaults.modeConfiguration;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.formattingOptions !== formattingOptions) {\n            formattingOptions = newDefaults.formattingOptions;\n            registerSchemaLessProviders();\n        }\n        if (newDefaults.externalFragmentDefinitions !== externalFragmentDefinitions) {\n            externalFragmentDefinitions = newDefaults.externalFragmentDefinitions;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.diagnosticSettings !== diagnosticSettings) {\n            diagnosticSettings = newDefaults.diagnosticSettings;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.schemas !== schemas) {\n            schemas = newDefaults.schemas;\n            registerAllProviders(newDefaults);\n        }\n    });\n    disposables.push(asDisposable(providers));\n    return asDisposable(disposables);\n}\nfunction asDisposable(disposables) {\n    return { dispose: () => disposeAll(disposables) };\n}\nfunction disposeAll(disposables) {\n    while (disposables.length) {\n        disposables.pop().dispose();\n    }\n}\n\n\n//# sourceURL=webpack://narcolepsy-graphql/./src/monaco-graphql/src/graphqlMode.ts?");

/***/ }),

/***/ "./src/monaco-graphql/src/languageFeatures.ts":
/*!****************************************************!*\
  !*** ./src/monaco-graphql/src/languageFeatures.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompletionAdapter: () => (/* binding */ CompletionAdapter),\n/* harmony export */   DiagnosticsAdapter: () => (/* binding */ DiagnosticsAdapter),\n/* harmony export */   DocumentFormattingAdapter: () => (/* binding */ DocumentFormattingAdapter),\n/* harmony export */   HoverAdapter: () => (/* binding */ HoverAdapter),\n/* harmony export */   toCompletion: () => (/* binding */ toCompletion),\n/* harmony export */   toCompletionItemKind: () => (/* binding */ toCompletionItemKind)\n/* harmony export */ });\n/* harmony import */ var graphql_language_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-language-service */ \"./node_modules/graphql-language-service/esm/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./src/monaco-graphql/src/utils.ts\");\n/**\n *  Copyright (c) 2021 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\n// --- completion ------\nclass DiagnosticsAdapter {\n    defaults;\n    _worker;\n    _disposables = [];\n    _listener = Object.create(null);\n    constructor(defaults, _worker) {\n        this.defaults = defaults;\n        this._worker = _worker;\n        this._worker = _worker;\n        let onChangeTimeout;\n        const onModelAdd = (model) => {\n            const modeId = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getModelLanguageId)(model);\n            if (modeId !== this.defaults.languageId) {\n                // it is tempting to load json models we cared about here\n                // into the webworker, however setDiagnosticOptions() needs\n                // to be called here from main process anyway, and the worker\n                // is already generating json schema itself!\n                return;\n            }\n            const modelUri = model.uri.toString();\n            // if the config changes, this adapter will be re-instantiated, so we only need to check this once\n            const jsonValidationForModel = defaults.diagnosticSettings?.validateVariablesJSON &&\n                defaults.diagnosticSettings.validateVariablesJSON[modelUri];\n            // once on adding a model, this is also fired when schema or other config changes\n            onChangeTimeout = setTimeout(() => {\n                void this._doValidate(model.uri, modeId, jsonValidationForModel);\n            }, 400);\n            this._listener[modelUri] = model.onDidChangeContent(() => {\n                clearTimeout(onChangeTimeout);\n                onChangeTimeout = setTimeout(() => {\n                    void this._doValidate(model.uri, modeId, jsonValidationForModel);\n                }, 400);\n            });\n        };\n        const onModelRemoved = (model) => {\n            monaco.editor.setModelMarkers(model, this.defaults.languageId, []);\n            const uriStr = model.uri.toString();\n            const listener = this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd), {\n            dispose() {\n                clearTimeout(onChangeTimeout);\n            },\n        }, monaco.editor.onWillDisposeModel((model) => {\n            onModelRemoved(model);\n        }), monaco.editor.onDidChangeModelLanguage((event) => {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n        }), {\n            dispose: () => {\n                for (const key in this._listener) {\n                    this._listener[key].dispose();\n                }\n            },\n        }, defaults.onDidChange(() => {\n            for (const model of monaco.editor.getModels()) {\n                if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getModelLanguageId)(model) === this.defaults.languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            }\n        }));\n        for (const model of monaco.editor.getModels()) {\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getModelLanguageId)(model) === this.defaults.languageId) {\n                onModelAdd(model);\n            }\n        }\n    }\n    dispose() {\n        for (const d of this._disposables) {\n            d?.dispose();\n        }\n        this._disposables = [];\n    }\n    async _doValidate(resource, languageId, variablesUris) {\n        const worker = await this._worker(resource);\n        // to handle an edge case bug that happens when\n        // typing before the schema is present\n        if (!worker) {\n            return;\n        }\n        const diagnostics = await worker.doValidation(resource.toString());\n        monaco.editor.setModelMarkers(monaco.editor.getModel(resource), languageId, diagnostics);\n        if (variablesUris) {\n            // only import the json mode if users configure it\n            await __webpack_require__.e(/*! import() */ \"vendors-node_modules_monaco-editor_esm_vs_language_json_monaco_contribution_js\").then(__webpack_require__.bind(__webpack_require__, /*! monaco-editor/esm/vs/language/json/monaco.contribution.js */ \"./node_modules/monaco-editor/esm/vs/language/json/monaco.contribution.js\"));\n            if (variablesUris.length < 1) {\n                throw new Error(\"no variables URI strings provided to validate\");\n            }\n            const jsonSchema = await worker.doGetVariablesJSONSchema(resource.toString());\n            if (!jsonSchema) {\n                return;\n            }\n            const schemaUri = monaco.Uri.file(variablesUris[0].replace(\".json\", \"-schema.json\")).toString();\n            const configResult = {\n                uri: schemaUri,\n                schema: jsonSchema,\n                fileMatch: variablesUris,\n            };\n            // TODO: export from api somehow?\n            monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n                schemaValidation: \"error\",\n                validate: true,\n                ...this.defaults?.diagnosticSettings?.jsonDiagnosticSettings,\n                schemas: [configResult],\n                enableSchemaRequest: false,\n            });\n        }\n    }\n}\nconst mKind = monaco.languages.CompletionItemKind;\nconst kindMap = {\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Text]: mKind.Text,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Method]: mKind.Method,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Function]: mKind.Function,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Constructor]: mKind.Constructor,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Field]: mKind.Field,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Variable]: mKind.Variable,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Class]: mKind.Class,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Interface]: mKind.Interface,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Module]: mKind.Module,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Property]: mKind.Property,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Unit]: mKind.Unit,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Value]: mKind.Value,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Enum]: mKind.Enum,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Keyword]: mKind.Keyword,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Snippet]: mKind.Snippet,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Color]: mKind.Color,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.File]: mKind.File,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Reference]: mKind.Reference,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Folder]: mKind.Folder,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.EnumMember]: mKind.EnumMember,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Constant]: mKind.Constant,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Struct]: mKind.Struct,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Event]: mKind.Event,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Operator]: mKind.Operator,\n    [graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.TypeParameter]: mKind.TypeParameter,\n};\nfunction toCompletionItemKind(kind) {\n    return kind in kindMap ? kindMap[kind] : mKind.Text;\n}\nfunction toCompletion(entry) {\n    const suggestions = {\n        // @ts-ignore\n        range: entry.range,\n        kind: toCompletionItemKind(entry.kind),\n        label: entry.label,\n        insertText: entry.insertText ?? entry.label,\n        insertTextRules: entry.insertText\n            ? monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n            : undefined,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        command: entry.command,\n    };\n    return suggestions;\n}\nclass CompletionAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n        this._worker = _worker;\n    }\n    get triggerCharacters() {\n        // removing /n character for now until we can\n        // re-introduce the behavior in a programmatic,\n        // context-aware fashion\n        return [\":\", \"$\", \" \", \"(\", \"@\"];\n    }\n    async provideCompletionItems(model, position, _context, _token) {\n        try {\n            const resource = model.uri;\n            const worker = await this._worker(model.uri);\n            const completionItems = await worker.doComplete(resource.toString(), position);\n            return {\n                incomplete: true,\n                suggestions: completionItems.map(toCompletion),\n            };\n        }\n        catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(\"Error fetching completion items\", err);\n            return { suggestions: [] };\n        }\n    }\n}\nclass DocumentFormattingAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n        this._worker = _worker;\n    }\n    async provideDocumentFormattingEdits(document, _options, _token) {\n        const worker = await this._worker(document.uri);\n        const formatted = await worker.doFormat(document.uri.toString());\n        if (!formatted) {\n            return [];\n        }\n        return [\n            {\n                range: document.getFullModelRange(),\n                text: formatted,\n            },\n        ];\n    }\n}\nclass HoverAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n    }\n    async provideHover(model, position, _token) {\n        const resource = model.uri;\n        const worker = await this._worker(model.uri);\n        const hoverItem = await worker.doHover(resource.toString(), position);\n        if (hoverItem) {\n            return {\n                range: hoverItem.range,\n                contents: [{ value: hoverItem.content }],\n            };\n        }\n        return {\n            contents: [],\n        };\n    }\n    dispose() { }\n}\n\n\n//# sourceURL=webpack://narcolepsy-graphql/./src/monaco-graphql/src/languageFeatures.ts?");

/***/ }),

/***/ "./src/monaco-graphql/src/utils.ts":
/*!*****************************************!*\
  !*** ./src/monaco-graphql/src/utils.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getModelLanguageId: () => (/* binding */ getModelLanguageId),\n/* harmony export */   getStringSchema: () => (/* binding */ getStringSchema),\n/* harmony export */   toCompletion: () => (/* binding */ toCompletion),\n/* harmony export */   toGraphQLPosition: () => (/* binding */ toGraphQLPosition),\n/* harmony export */   toMarkerData: () => (/* binding */ toMarkerData),\n/* harmony export */   toMonacoRange: () => (/* binding */ toMonacoRange)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"./node_modules/graphql/utilities/printSchema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"./node_modules/graphql/utilities/buildASTSchema.mjs\");\n/* harmony import */ var graphql_language_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-language-service */ \"./node_modules/graphql-language-service/esm/index.js\");\n/**\n *  Copyright (c) 2021 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\n// for backwards compatibility\nconst getModelLanguageId = (model) => {\n    if (\"getModeId\" in model) {\n        // for <0.30.0 support\n        // @ts-expect-error\n        return model.getModeId();\n    }\n    return model.getLanguageId();\n};\nfunction toMonacoRange(range) {\n    return {\n        startLineNumber: range.start.line + 1,\n        startColumn: range.start.character + 1,\n        endLineNumber: range.end.line + 1,\n        endColumn: range.end.character + 1,\n    };\n}\nfunction toGraphQLPosition(position) {\n    return new graphql_language_service__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber - 1, position.column - 1);\n}\nfunction toCompletion(entry, range) {\n    const results = {\n        label: entry.label,\n        insertText: entry.insertText,\n        insertTextFormat: entry.insertTextFormat,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        range: range ? toMonacoRange(range) : undefined,\n        kind: entry.kind,\n    };\n    if (entry.insertTextFormat) {\n        results.insertTextFormat = entry.insertTextFormat;\n    }\n    if (entry.command) {\n        results.command = { ...entry.command, id: entry.command.command };\n    }\n    return results;\n}\n/**\n * Monaco and Vscode have slightly different ideas of marker severity.\n * for example, vscode has Error = 1, whereas monaco has Error = 8. this takes care of that\n * @param severity {DiagnosticSeverity} optional vscode diagnostic severity to convert to monaco MarkerSeverity\n * @returns {monaco.MarkerSeverity} the matching marker severity level on monaco's terms\n */\n// export function toMonacoSeverity(severity?: Diagnostic['severity']): monaco.MarkerSeverity {\n//   switch (severity) {\n//     case 1: {\n//       return monaco.MarkerSeverity.Error\n//     }\n//     case 4: {\n//       return monaco.MarkerSeverity.Hint\n//     }\n//     case 3: {\n//       return monaco.MarkerSeverity.Info\n//     }\n//     case 2: {\n//       return monaco.MarkerSeverity.Warning\n//     }\n//     default: {\n//       return monaco.MarkerSeverity.Warning\n//     }\n//   }\n// }\nfunction toMarkerData(diagnostic) {\n    return {\n        startLineNumber: diagnostic.range.start.line + 1,\n        endLineNumber: diagnostic.range.end.line + 1,\n        startColumn: diagnostic.range.start.character + 1,\n        endColumn: diagnostic.range.end.character,\n        message: diagnostic.message,\n        severity: 8,\n        // severity: toMonacoSeverity(diagnostic.severity),\n        code: diagnostic.code || undefined,\n    };\n}\n/**\n * Send the most minimal string representation\n * to the worker for language service instantiation\n */\nconst getStringSchema = (schemaConfig) => {\n    const { schema: graphQLSchema, documentAST, introspectionJSON, introspectionJSONString, documentString, ...rest } = schemaConfig;\n    if (graphQLSchema) {\n        return {\n            ...rest,\n            documentString: (0,graphql__WEBPACK_IMPORTED_MODULE_1__.printSchema)(graphQLSchema),\n        };\n    }\n    if (introspectionJSONString) {\n        return {\n            ...rest,\n            introspectionJSONString,\n        };\n    }\n    if (documentString) {\n        return {\n            ...rest,\n            documentString,\n        };\n    }\n    if (introspectionJSON) {\n        return {\n            ...rest,\n            introspectionJSONString: JSON.stringify(introspectionJSON),\n        };\n    }\n    if (documentAST) {\n        const schema = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.buildASTSchema)(documentAST, rest.buildSchemaOptions);\n        return {\n            ...rest,\n            documentString: (0,graphql__WEBPACK_IMPORTED_MODULE_1__.printSchema)(schema),\n        };\n    }\n    throw new Error(\"no schema supplied\");\n};\n\n\n//# sourceURL=webpack://narcolepsy-graphql/./src/monaco-graphql/src/utils.ts?");

/***/ }),

/***/ "./src/monaco-graphql/src/workerManager.ts":
/*!*************************************************!*\
  !*** ./src/monaco-graphql/src/workerManager.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkerManager: () => (/* binding */ WorkerManager)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/monaco-graphql/src/utils.ts\");\n\nconst STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nclass WorkerManager {\n    _defaults;\n    _idleCheckInterval;\n    _lastUsedTime = 0;\n    _configChangeListener;\n    _worker = null;\n    _client = null;\n    constructor(defaults) {\n        this._defaults = defaults;\n        this._idleCheckInterval = window.setInterval(() => this._checkIfIdle(), 30 * 1000);\n        // this is where we re-start the worker on config changes\n        this._configChangeListener = this._defaults.onDidChange(() => {\n            this._stopWorker();\n        });\n    }\n    _stopWorker() {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    }\n    dispose() {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    }\n    _checkIfIdle() {\n        if (!this._worker) {\n            return;\n        }\n        const timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    }\n    async _getClient() {\n        this._lastUsedTime = Date.now();\n        if (!this._client && !this._worker) {\n            try {\n                this._worker = monaco.editor.createWebWorker({\n                    // module that exports the create() method and returns a `GraphQLWorker` instance\n                    moduleId: \"monaco-graphql/esm/GraphQLWorker.js\",\n                    label: this._defaults.languageId,\n                    // passed in to the create() method\n                    createData: {\n                        languageId: this._defaults.languageId,\n                        formattingOptions: this._defaults.formattingOptions,\n                        // only string based config can be passed from the main process\n                        languageConfig: {\n                            schemas: this._defaults.schemas?.map(_utils__WEBPACK_IMPORTED_MODULE_0__.getStringSchema),\n                            externalFragmentDefinitions: this._defaults.externalFragmentDefinitions,\n                            // TODO: make this overridable\n                            // MonacoAPI possibly another configuration object for this I think?\n                            // all of this could be organized better\n                            fillLeafsOnComplete: this._defaults.completionSettings\n                                .__experimental__fillLeafsOnComplete,\n                        },\n                    },\n                });\n                this._client = await this._worker.getProxy();\n            }\n            catch (error) {\n                // eslint-disable-next-line no-console\n                console.error(\"error loading worker\", error);\n            }\n        }\n        return this._client;\n    }\n    async getLanguageServiceWorker(...resources) {\n        const client = await this._getClient();\n        await this._worker.withSyncedResources(resources);\n        return client;\n    }\n}\n\n\n//# sourceURL=webpack://narcolepsy-graphql/./src/monaco-graphql/src/workerManager.ts?");

/***/ })

}])