@inherits ContextSensitiveComponent<IHttpRequestContext>
@inject IJSRuntime JsRuntime
@inject NarcolepsyJs JsService

<div class="response-text" @ref="EditorElement"></div>

@code {

    private HttpResponse? Response => Context.Response.Value;

    private MonacoEditor Editor;

    private ElementReference EditorElement;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    protected override async Task OnStateChangedAsync() {
        await base.OnStateChangedAsync();
        Context.Response.ValueChanged += async (_, r) => {
            await SetModel();
            StateHasChanged();
        };

        if (Editor is not null)
            await SetModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        Editor = await JsService.CreateEditor(EditorElement, "plaintext", true, "");
        await SetModel();
    }

    private async Task SetModel() {
    // set the model
        if (Response is null) {
            await Editor.SetModel(await JsService.CreateTextModel("", "plaintext"));
            return;
        }

    // detect the language
        MonacoLanguage Language = MonacoLanguage.GetByContentTypeHeader(Response.ResponseHeaders.GetHeaderValue("Content-Type"));

        MonacoTextModel NewModel = await JsService.CreateTextModel(await JsService.FormatCode(Response.BodyText, Language.PrimaryExtension), Language.Id);
        await Editor.SetModel(NewModel);
    }

}