@inherits ContextSensitiveComponent<IHttpRequestContext>
@using System.Text
@using Microsoft.JSInterop
@using Narcolepsy.Core.Interop
@inject IJSRuntime JsRuntime
@inject NarcolepsyJs JsService

<div class="response-text" @ref="EditorElement"></div>

@code {
    private HttpResponse? Response => this.Context.Response.Value;

    private MonacoEditor Editor;

    private ElementReference EditorElement;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    protected override async Task OnContextChangedAsync() {
        await base.OnContextChangedAsync();
        this.Context.Response.ValueChanged += async (_, r) => {
            await this.SetModel();
            this.StateHasChanged();
        };

        if (this.Editor is not null)
            await this.SetModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        this.Editor = await this.JsService.CreateEditor(this.EditorElement, "plaintext", true, "");
        await this.SetModel();
    }

    private async Task SetModel() {
        // set the model
        if (Response is null) {
            await this.Editor.SetModel(await this.JsService.CreateTextModel("", "plaintext"));
            return;
        }

        // detect the language
        MonacoLanguage Language = MonacoLanguage.GetByContentTypeHeader(Response.ResponseHeaders.GetHeaderValue("Content-Type"));

        MonacoTextModel NewModel = await this.JsService.CreateTextModel(await this.JsService.FormatCode(Response.BodyText, Language.PrimaryExtension), Language.Id);
        await this.Editor.SetModel(NewModel);
    }
}
