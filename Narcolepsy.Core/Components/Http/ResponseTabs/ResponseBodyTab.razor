@using Narcolepsy.Core.Components.Http.ResponseTabs.ResponseBodyViews
@inherits ContextSensitiveComponent<IHttpRequestContext>

<div class="body-tab">
    <div class="view-config">
        <Dropdown Value="CurrentViewType" ValueChanged="ViewTypeChanged" TValue="ViewSelection" class="dropdown">
            @foreach (ViewSelection EnabledView in EnabledViews) {
                <Option Value="@EnabledView">@EnabledView.ToString()</Option>
            }
        </Dropdown>
    </div>
    <div class="view">
         @switch (CurrentViewType) {
            case ViewSelection.Formatted:
                <FormattedView Context="Context"/>
                break;
            case ViewSelection.Raw:
                <RawView Context="Context"/>
                break;
            case ViewSelection.Preview:
                break;
        }
    </div>
</div>

@code {
    private ViewSelection CurrentViewType = ViewSelection.Preview;

    private ViewSelection[] EnabledViews = { ViewSelection.Preview, ViewSelection.Formatted, ViewSelection.Raw };

    private static readonly string[] SupportedPreviewTypes = {
                                                                 "blarg"
                                                             };

    private static readonly string[] SupportedFormattedTypes = {
                                                                   "application/json",
                                                                   "text/html",
                                                                   "text/javascript",
                                                                   "text/css",
                                                                   "application/xml",
                                                                   "text/xml",
                                                                   "application/xaml+xml",
                                                                   "application/xml-dtd"
                                                               };

    private enum ViewSelection {
        Formatted,
        Raw,
        Preview
    }

    private bool Supports(string contentType, string[] supportedTypes) => supportedTypes.Contains(contentType.ToLowerInvariant());

    protected override async Task OnContextChangedAsync() {
        await base.OnContextChangedAsync();

        // todo: dispose!
        Context.Response.ValueChanged += (_, r) => UpdateEnabledViews(r.Value);
        CurrentViewType = Context.State.Get("http-response-body-tab", ViewSelection.Preview);
        UpdateEnabledViews(Context.Response.Value);
    }

    private void UpdateEnabledViews(HttpResponse? response) {
        string ContentType = response?.ResponseHeaders.GetHeaderValue("Content-Type")?.Split(";")[0] ?? "";

        List<ViewSelection> Supported = new();
        if (Supports(ContentType, ResponseBodyTab.SupportedPreviewTypes))
            Supported.Add(ViewSelection.Preview);
        if (Supports(ContentType, ResponseBodyTab.SupportedFormattedTypes))
            Supported.Add(ViewSelection.Formatted);

        Supported.Add(ViewSelection.Raw);

        EnabledViews = Supported.ToArray();

        if (!Supported.Contains(CurrentViewType)) ViewTypeChanged(EnabledViews[0]);
        InvokeAsync(StateHasChanged);
    }

    private void ViewTypeChanged(ViewSelection newSelection) {
        CurrentViewType = newSelection;
        Context.State.Add("http-response-body-tab", newSelection);
    }

}