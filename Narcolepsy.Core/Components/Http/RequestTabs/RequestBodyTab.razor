@using Narcolepsy.Core.Renderables.BodyEditors
@using Narcolepsy.Platform.Logging
@inherits ContextSensitiveComponent<IHttpRequestContext>
<div class="request-body">
    <div class="toolbar">
        <Dropdown Value="ActiveBodyEditor" TValue="IBodyEditor" ValueChanged="ValueChanged" DisplayTextSelector="e => e?.Name" class="dropdown">
            @foreach (IBodyEditor Editor in Configuration.RequestBodyEditors) {
                <Option Value="Editor">@Editor.Name</Option>
            }
        </Dropdown>
    </div>
    <div class="editor">
        @ActiveBodyEditor?.RenderWithContext(Context)
    </div>
</div>

@code {

    [CascadingParameter]
    public HttpViewConfiguration Configuration { get; set; }

    private IBodyEditor? ActiveBodyEditor;

    protected override async Task OnContextChangedAsync() {
        await base.OnContextChangedAsync();
        string? SavedId = this.Context?.State.Get<string>("http-request-body-tab", null);

        if (Configuration.RequestBodyEditors.Count == 0) {
            Logger.Warning("No HTTP body editors were added");
            return;
        }
        if (SavedId is null) {
            ActiveBodyEditor = Configuration.RequestBodyEditors[0];
        }
        else {
            IBodyEditor? Match = Configuration.RequestBodyEditors.FirstOrDefault(e => e.Id == SavedId);
            if (Match is null) {
                Logger.Warning("Unable to restore HTTP body editor state. Editor with id {EditorId} not found", SavedId);
                ActiveBodyEditor = Configuration.RequestBodyEditors[0];
                return;
            }
            ActiveBodyEditor = Match;
        }
    }

    private void ValueChanged(IBodyEditor newEditor) {
        ActiveBodyEditor = newEditor;
        this.Context?.State.Add("http-request-body-tab", newEditor.Id);
    }

}