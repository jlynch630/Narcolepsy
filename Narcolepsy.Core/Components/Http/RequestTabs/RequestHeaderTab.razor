<div class="req-header-list">
    @for (int i = 0; i < Headers.Count; i++) {
        HttpHeader Header = Headers[i];
        int HeaderIndex = i;

        <div class="header-editor@(Header.IsUserModifiable ? "" : " readonly")">
            <input @ref="LastNameInput" placeholder="Name" class="header-edit name@(Header.IsNameValid ? "" : " invalid")" @onchange="e => UpdateHeaderName(e, HeaderIndex)" value="@Header.Name"/>
            <input @ref="LastValueInput" placeholder="Value" class="header-edit value@(Header.IsValueValid ? "" : " invalid")" @onchange="e => UpdateHeaderValue(e, HeaderIndex)" value="@Header.Value"/>
            <div class="note-button-container">
                <button class="header-button material-symbols-rounded@(Header.Note is null ? " transparent" : "")" tabindex="-1">info</button>
                @if (Header.Note is not null) {
                    <div class="header-note">@Header.Note</div>
                }
            </div>
            <button class="header-button material-symbols-rounded remove-btn" tabindex="-1" @onclick="() => RemoveHeader(HeaderIndex)">close</button>
        </div>
    }

    <div class="header-editor new">
        <input class="header-edit name" placeholder="Name" @onfocus="() => CreateNew(true)"/>
        <input class="header-edit value" placeholder="Value" @onfocus="() => CreateNew(false)"/>
    </div>
</div>

@code {

    [Parameter]
    public IHttpRequestContext Context { get; set; }

    private ElementReference LastNameInput;
    private ElementReference LastValueInput;
    private bool ShouldFocusLastName;
    private bool ShouldFocusLastValue;

    private IList<HttpHeader> Headers => Context.Headers;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        Context.Headers.ValueChanged += async (_, r) => { StateHasChanged(); };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);

        if (ShouldFocusLastName) {
            await LastNameInput.FocusAsync();
            ShouldFocusLastName = false;
        }

        if (ShouldFocusLastValue) {
            await LastValueInput.FocusAsync();
            ShouldFocusLastValue = false;
        }
    }

    private void UpdateHeaderValue(ChangeEventArgs e, int index) {
        Headers[index] = Headers[index] with { Value = e.Value?.ToString() ?? "", Note = null };
    }

    private void UpdateHeaderName(ChangeEventArgs e, int index) {
        Headers[index] = Headers[index] with { Name = e.Value?.ToString() ?? "", Note = null };
    }

    private void RemoveHeader(int index) {
        if (!Headers[index].IsUserModifiable) return;
        Headers.RemoveAt(index);
    }

    private void CreateNew(bool focusOnName) {
        Headers.Add(new HttpHeader("", "", true, true, null));
        ShouldFocusLastName = focusOnName;
        ShouldFocusLastValue = !focusOnName;
    }

}