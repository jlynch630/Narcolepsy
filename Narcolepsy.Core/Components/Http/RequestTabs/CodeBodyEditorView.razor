@inject NarcolepsyJs JsService;
@using Narcolepsy.Core.Http.Body
@using System.Diagnostics
@implements IDisposable

<div class="editor" @ref="EditorRef"></div>

@code {

    [Parameter]
    public IHttpRequestContext Context { get; set; }

    [Parameter]
    public string? LanguageId { get; set; }

    [Parameter]
    public string? ContentType { get; set; }

    private ElementReference EditorRef;

    private MonacoEditor? Editor;

    private TextBody? Body;

    public override async Task SetParametersAsync(ParameterView parameters) {
        if (ContentType is null && LanguageId is null) {
            await base.SetParametersAsync(parameters);
            return;
        }

        bool ShouldUpdateContentType = parameters.GetValueOrDefault<string>(nameof(CodeBodyEditorView.ContentType)) != ContentType;
        bool ShouldUpdateLanguage = parameters.GetValueOrDefault<string>(nameof(CodeBodyEditorView.LanguageId)) != LanguageId;
        bool ShouldUpdateEverything = parameters.GetValueOrDefault<IHttpRequestContext>(nameof(CodeBodyEditorView.Context)) != Context;

        await base.SetParametersAsync(parameters);

        if (ShouldUpdateEverything || ShouldUpdateContentType) {
            // content type changed! update the header
            UpdateHeader();
        }

        if (ShouldUpdateEverything || ShouldUpdateLanguage) {
            await UpdateModel();
        }
    }

    private async Task UpdateModel() {
        if (Editor is null) return;
        Body = Context.Body.Value as TextBody;
        await Editor.SetModel(await JsService.CreateTextModel(Body.BodyContent, LanguageId ?? "plaintext"));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender) return;
        UpdateHeader();

        Body = Context.Body.Value as TextBody ?? new TextBody();
        Context.Body.Value = Body;
        Context.Body.ValueChanged += BodyChanged;

        Editor = await JsService.CreateEditor(EditorRef, LanguageId ?? "plaintext", false, Body.BodyContent);
        Editor.ModelContentChanged += (_, value) => { Body.BodyContent = value; };
    }

    private async void BodyChanged(object? sender, EventArgs e) {
        await UpdateModel();
    }

    private void UpdateHeader() {
        if (ContentType is null) return;

        Context.Headers.SetAutoHeader(
            "Content-Type",
            ContentType,
            "This header was added automatically based on the request body"
            );
    }

    public void Dispose() {
        Context.Body.ValueChanged -= BodyChanged;
    }

}