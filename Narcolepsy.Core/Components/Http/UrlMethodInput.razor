@using System.Text.RegularExpressions
@using System.Diagnostics
@using Narcolepsy.Platform.Logging
@inherits ContextSensitiveComponent<IHttpRequestContext>
<div class="url-method-container">
    <select class="method-select" @bind="Context.Method.Value">
        @foreach (string Method in Configuration.AvailableHttpMethods) {
            <option value="@Method">@Method</option>
        }
    </select>
    <input class="url-input" type="text" value="@Context.Url.Value" @onchange="UrlChanged"/>
    <Button class="execute" @onclick="Execute">
        @if (!IsLoadingRequest) {
            <span>Send</span>
        }
        else {
            <Spinner/>
        }
    </Button>
</div>

@code {

    [Parameter]
    public HttpViewConfiguration Configuration { get; set; }

    private bool IsLoadingRequest = false;

    private CancellationTokenSource ReqCancelToken;

    protected override void OnInitialized() {
        base.OnInitialized();
        UpdateOnChange(ctx => ctx.Url);
        UpdateOnChange(ctx => ctx.Method);
    }

    private async Task Execute() {
        if (IsLoadingRequest) {
            // cancel it!
            ReqCancelToken.Cancel();
            return;
        }

        ReqCancelToken = new CancellationTokenSource();
        IsLoadingRequest = true;
        StateHasChanged();
        await Context.Execute(ReqCancelToken.Token);
        IsLoadingRequest = false;
    }

    // protected override Task OnAfterRenderAsync(bool firstRender) {
    //     if (this.IsLoadingRequest && this.Stopwatch is null) {
    //         this.Stopwatch = Stopwatch.StartNew();
    //     } else if (!this.IsLoadingRequest && this.Stopwatch is not null) {
    //         this.Stopwatch.Stop();
    //         Logger.Information("Total request time: {Time}ms", this.Stopwatch.ElapsedMilliseconds);
    //         this.Stopwatch = null;
    //     }
    //     return base.OnAfterRenderAsync(firstRender);
    // }

    private async Task UrlChanged(ChangeEventArgs e) {
        string NewUrl = e.Value?.ToString() ?? "";

        if (!Regex.IsMatch(NewUrl, "^[A-Za-z\\-]+://"))
            NewUrl = "https://" + NewUrl;

        Context.Url.Value = NewUrl;
    }

}