@using Narcolepsy.Core.Renderables.Tabs
@inherits ContextSensitiveComponent<IHttpRequestContext>
<div class="tabs@(ClassName is null ? "" : $" {ClassName}")" style=@(GridArea is null ? "" : $"grid-area: {GridArea}")>
    <div class="tab-list">
        @foreach (ITab<IHttpRequestContext> Tab in TabList) {
            <button class="tab-button @(Tab == ActiveTab ? "active" : "")" @onclick="() => SetActiveTab(Tab)">
                @Tab.Title
            </button>
        }
    </div>
    <div class="tab-view">
        <CascadingValue Value="Configuration">
            @ActiveTab?.RenderWithContext(Context)
        </CascadingValue>
    </div>
</div>

@code {

    [Parameter]
    public HttpViewConfiguration Configuration { get; set; }

    [Parameter]
    public IReadOnlyList<ITab<IHttpRequestContext>> TabList { get; set; }

    [Parameter]
    public string? GridArea { get; set; }

    [Parameter]
    public string? ClassName { get; set; }

    [Parameter]
    public string? StateId { get; set; }

    private ITab<IHttpRequestContext>? ActiveTab;

    private void SetActiveTab(ITab<IHttpRequestContext> newActive) {
        ActiveTab = newActive;
        if (StateId is not null)
            Context.State.Add(StateId, newActive.Title);
    }

    protected override void OnParametersSet() {
        base.OnParametersSet();

        ActiveTab ??= TabList[0];
    }

    protected override async Task OnStateChangedAsync() {
        await base.OnStateChangedAsync();

        if (StateId is null) return;
        string? SetTab = Context.State.Get<string?>(StateId, null);

        ActiveTab = SetTab is null ? TabList[0] : TabList.FirstOrDefault(t => t.Title == SetTab) ?? TabList[0];
    }

}