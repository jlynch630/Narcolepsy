namespace Narcolepsy.CodeGen.Generators {
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net.Http;
    using Microsoft.CodeAnalysis;

    [Generator]
    public class PublicSuffixGenerator : ISourceGenerator {
        private HttpClient Client = new HttpClient();
        public void Execute(GeneratorExecutionContext context) {
            List<string> Rules = new List<string>();
            using (Stream Text = this.Client.GetStreamAsync("https://publicsuffix.org/list/public_suffix_list.dat").Result) {
                using (StreamReader LineReader = new StreamReader(Text)) {
                    string Line;
                    while ((Line = LineReader.ReadLine()) != null) {
                        if (Line.StartsWith("//") || String.IsNullOrWhiteSpace(Line)) continue;

                        // an "exception rule." there are only 8 of them in this multiple thousand line file. we're probably okay
                        if (Line.StartsWith("!")) continue;

                        // otherwise, we have a real rule! either a wildcard or
                        bool IsWildcard = Line.StartsWith("*.");
                        string RuleDomain = IsWildcard ? Line.Substring(2) : Line;

                        Rules.Add($"new PublicSuffix(\"{RuleDomain}\", {(IsWildcard ? " true" : "false")})");
                    }
                }
            }
            Rules.Sort((a, b) => b.Length - a.Length);

            string Source = $@"// <auto-generated/>
namespace Narcolepsy.CodeGen;

internal record struct PublicSuffix(string Domain, bool IsWildcard) {{
    public static PublicSuffix[] Rules = new[] {{
        {String.Join(",\n\t\t", Rules)}
    }};
}}";
            context.AddSource("PublicSuffix.g.cs", Source);
        }

        public void Initialize(GeneratorInitializationContext context) {
        }
    }
}